#!/usr/bin/env node
var path = require('path')
var configLib = require(path.join(__dirname, '../lib/config.js'))
var nopt = require('nopt')
var noptUsage = require('nopt-usage')
var knownOpts = {
  'output-config': Boolean,
  'root': String,
  'help': Boolean
}
var shortHands = {
  'h': ['--help'],
  'o': ['--output-config'],
  'r': ['--root']
}
var description = {
  'help': 'Display this help',
  'output-config': 'Output the JSON configuration on the standard output',
  'root': 'Benchmark suite root'
}
var parsed = nopt(knownOpts, shortHands, process.argv, 2)

if (parsed.help) {
  var usage = noptUsage(knownOpts, shortHands, description)
  var executableName = path.basename(process.argv[1])
  console.log('Usage: ' + executableName + ' [options]')
  console.log(usage)
  process.exit(1)
}

if (!parsed.root) {
  console.log('fatal: No benchmarking suite root directory provided')
  process.exit(1)
}

// Convert to absolute path if the path is relative
var dirRoot = path.resolve(process.cwd(), parsed.root)
configLib.config(dirRoot, function (err, config) {
  if (err) {
    console.log(JSON.stringify(err, null, '  '))
    process.exit(1)
  }

  if (parsed['output-config']) {
    console.log(JSON.stringify(config, null, '  '))
  } else if (parsed.argv.remain.length > 0) {
    configLib.extractShortNames(config, parsed)
    var summary = {
      benchmarks: {},
      compilers: {},
      implementations: {},
      environments: {}
    }
    configLib
      .genRunConfigurations(config, {
        benchmarks: parsed.benchmarks.length > 0 ? parsed.benchmarks : config['benchmarks-list'],
        implementations: parsed.implementations.length > 0 ? parsed.implementations : config['implementation-list'],
        compilers: parsed.compilers.length > 0 ? parsed.compilers : config['compiler-list'],
        environments: parsed.environments.length > 0 ? parsed.environments : config['environment-list']
      })
      .forEach(function (config) {
        summary.benchmarks[config.benchmark['short-name']] = true
        summary.compilers[config.compiler['short-name']] = true
        summary.implementations[config.implementation['short-name']] = true
        summary.environments[config.environment['short-name']] = true
      })
    Object.keys(summary).forEach(function (k) {
      if (parsed[k].length === 0) {
        console.log('Available ' + k + ': ' + Object.keys(summary[k]).sort())
      }
    })
    if (parsed.implementations.length === 0) {
      console.log()
    }
  } else {
    console.log('Current platform: ' + configLib.determinePlatform(config))
    console.log('Available experiments: ' + config['experiment-list'].slice().sort())
    console.log('Available benchmarks: ' + config['benchmark-list'].slice().sort())
    console.log('Available compilers: ' + config['compiler-list'].slice().sort())
    console.log('Available environments: ' + config['environment-list'].slice().sort())
    console.log('Available implementations: ' + config['implementation-list'].slice().sort())
    console.log("Add '-h' for possible options")
  }
  process.exit(0)
})
