#!/usr/bin/env node
var nopt = require('nopt')
var noptUsage = require('nopt-usage')
var path = require('path')
var fs = require('fs')
var spawnSync = require('child_process').spawnSync

function alignCommands (commands) {
  var maxCommandLength = 0
  for (var c in commands) {
    if (c.length > maxCommandLength) {
      maxCommandLength = c.length
    }
  }

  // Determine the next position of the aligned boundary
  var residue = maxCommandLength % 8
  var boundaryIndex = maxCommandLength + residue
  var spaces = '                                                '
  var lines = []
  for (c in commands) {
    lines.push('    ' + c + spaces.slice(0, boundaryIndex - c.length) + commands[c])
  }

  return lines.join('\n')
}

function findRootDirectoryPath (start, name) {
  var dir = start
  var done = false
  while (!done) {
    var rootPath = path.join(dir, './' + name)
    var exists = false
    try {
      exists = fs.statSync(rootPath).isDirectory()
    } catch (e) {
      exists = false
    }

    if (exists) {
      return dir
    } else {
      done = dir === '/'
      dir = path.dirname(dir)
    }
  }
  return null
}

var knownOpts = {
  'help': Boolean,
  'root': String
}
var shortHands = {
  'h': ['--help'],
  'r': ['--root']
}

var description = {
  'help': 'Display this help',
  'root': 'Benchmark suite root'
}
var parsed = nopt(knownOpts, shortHands)

if ((parsed.help && parsed.argv.remain.length === 0) || parsed.argv.remain.indexOf('help') > -1 || parsed.argv.original.length === 0) {
  if (parsed.argv.remain.length > 1) {
    var commandName = parsed.argv.remain[1]
    var commandPath = path.join(__dirname, commandName)
    var stat = fs.statSync(commandPath)

    if (stat.isFile()) {
      var r = spawnSync(commandPath, ['-h'], {stdio: 'inherit'})
      process.exit(r.status)
    } else {
      console.log('Invalid command: ' + commandName)
      process.exit(1)
    }
  }

  var executableName = path.basename(process.argv[1])
  console.log('usage: ' + executableName + ' [<options>] <command> [<args>]\n')
  console.log('Options:')
  console.log(noptUsage(knownOpts, shortHands, description))
  console.log('')
  console.log('Available commands: ')
  console.log(alignCommands({
    'build': 'Create a build from a configuration',
    // 'init': 'Create an empty benchmarking repository',
    // 'install': 'Add and initialize an artifact in the repository',
    'list': 'Find, verify, and list available artifact(s)',
    'run': 'Execute build(s) on compatible environment(s) and produce a run',
    'report': 'Aggregate run(s), select significant result(s), and produce a report'
  }))
  console.log('')
  console.log("See '" + executableName + " help <command>' to read about a specific subcommand.")
  process.exit(0)
}

if (parsed.version || parsed.argv.remain.indexOf('version') > -1) {
  var packageInfo = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json')))
  console.log(packageInfo.version)
  process.exit(0)
}

if (parsed.argv.remain.length < 1) {
  console.log('no command specified')
  process.exit(1)
}

var hiddenDirName = '.wu'
var suiteRoot = parsed.root ? path.resolve(process.cwd(), parsed.root) : findRootDirectoryPath(process.cwd(), hiddenDirName)
if (suiteRoot === null) {
  console.log('fatal: Not a benchmarking repository (or any of the parent directories): ' + hiddenDirName)
  process.exit(1)
}

commandName = parsed.argv.remain[0]
commandPath = path.join(__dirname, commandName)
var args = parsed.argv.original.slice(parsed.argv.original.indexOf(commandName) + 1).concat(['--root', suiteRoot])
r = spawnSync(commandPath, args, {stdio: 'inherit'})
process.exit(r.status)
