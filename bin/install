#!/usr/bin/env node
let path = require('path')
let nopt = require('nopt')
let noptUsage = require('nopt-usage')
let shelljs = require('shelljs')
let fs = require('fs')
let configLib = require(path.join(__dirname, '../lib/config.js'))
let request = require('request')
let tar = require('tar')
let StreamZip = require('node-stream-zip')
let zlib = require('zlib')
let dir = require('node-dir')
let pointer = require('json-pointer')
let suiteRoot = configLib.findRootDirectoryPath(process.cwd(), '.wu')
let wuTmpDirPath = path.join(suiteRoot, '.wu', 'tmp')
let wuInstall = require(path.join(__dirname, '..', 'lib', 'install.js'))

function whenVerbose (m) {
  if (options.verbose) {
    console.log(m)
  }
}

function cleanupThenExit (exitCode) {
  return function (err) {
    if (err && err instanceof Error) {
      console.log(err.message)
    }

    whenVerbose('Cleaning up ' + wuTmpDirPath)

    // Safety check to prevent automatically deleting
    // the entire file system in case of programming error!
    if (wuTmpDirPath.match('\/\.wu\/tmp$')) {
      shelljs.rm('-rf', wuTmpDirPath)
    }

    clearCache()
    process.exit(exitCode)
  }
}

function parseCommandLineArguments (parsed) {
  var dependency = {
    source: null
  }

  if (parsed.destination) {
    try {
      parsed.destination = JSON.parse(parsed.destination)
    } catch (e) {
      console.log('Invalid json object ' + parsed.destination)
      cleanupThenExit(1)()
    }
  } else {
    parsed.destination = null
  }

  if (parsed.argv.remain.length > 0) {
    dependency.source = parsed.argv.remain[0]
  } else {
    dependency.source = process.cwd()
    dependency.destination = null

    if (parsed.destination !== dependency.destination) {
      console.log("Provided destination '" + parsed.destination + "' but no destination should be provided when a directory is supplied")
      cleanupThenExit(1)()
    }
  }

  if (parsed.destination) {
    dependency.destination = parsed.destination
  }

  if (parsed.type) {
    dependency.type = parsed.type
  }

  if (parsed['short-name']) {
    dependency['short-name'] = parsed['short-name']
  }

  return dependency
}

function clearCache () {
  let wuDependencyCache = path.join(suiteRoot, '.wu', 'dependencies')
  let wuDependencyCacheListing = path.join(suiteRoot, '.wu', 'dependencies.json')
  shelljs.rm('-rf', path.join(wuDependencyCache, '*'))
  shelljs.rm(wuDependencyCacheListing)
  fs.writeFileSync(wuDependencyCacheListing, JSON.stringify({}))
  whenVerbose('Cleared cache')
}

let knownOpts = {
  'clear-cache': Boolean,
  'compatibilities': Boolean,
  'destination': String,
  'dry-run': Boolean,
  'help': Boolean,
  'implementation': [Array, String],
  'not-recursive': Boolean,
  'root': String,
  'short-name': String,
  'type': String,
  'verbose': Boolean
}
let shortHands = {
  'd': ['--destination'],
  'h': ['--help'],
  'i': ['--implementation'],
  'r': ['--root'],
  's': ['--short-name'],
  't': ['--type'],
  'v': ['--verbose']
}
let parsed = nopt(knownOpts, shortHands, process.argv, 2)
let options = {
  verbose: parsed.verbose || false,
  recursive: !parsed['not-recursive'],
  compatibilities: parsed['compatibilities'] || false,
  implementations: parsed['implementation']
}

if (parsed.help) {
  fs.createReadStream(path.join(__dirname, '..', 'lib', 'README-install.md'))
    .pipe(process.stdout)
    .on('close', () => process.exit(1))
} else {
  if (parsed['clear-cache']) {
    clearCache()
    process.exit(0)
  }

  let installer = wuInstall.Installer(options)

  function checkDestination (dependency) {
    if (dependency.destination && installer.exists(dependency)) {
      return Promise.reject(new Error('Directory ' + dependency.destination + ' already exists, aborting'))
    } else {
      return Promise.resolve(dependency)
    }
  }

  function install (dependency) {
    if (parsed['dry-run']) {
      return Promise.resolve(dependency)
    } else {
      return Promise.resolve(dependency)
        .then(installer.install)
    }
  }

  function move (dependency) {
    if (parsed['dry-run']) {
      return Promise.resolve(dependency)
    } else {
      return Promise.resolve(dependency)
        .then(installer.move)
    }
  }

  function print (dependency) {
    if (parsed.verbose || parsed['dry-run']) {
      console.log(JSON.stringify(dependency, null, '  '))
      return Promise.resolve(dependency)
    } else {
      return Promise.resolve(dependency)
    }
  }

  function printStackTrace (err) {
    if (parsed.verbose && err.stack) {
      console.log(err.stack)
    }

    return Promise.reject(err)
  }

  installer
    .fetch(parseCommandLineArguments(parsed))
    .then(print)
    .then(checkDestination)
    .then(install)
    .then(move)
    .catch(printStackTrace)
    .then(cleanupThenExit(0), cleanupThenExit(1))

  // Graceful shutdown in case of CTRL-C
  if (process.platform === 'win32') {
    throw new Error('Unsupported windows platform')
  }

  process.on('SIGINT', function () {
    cleanupThenExit(1)()
  })

}
