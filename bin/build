#!/usr/bin/env node

var path = require('path')
var configLib = require(path.join(__dirname, '../lib/config.js'))
var nopt = require('nopt')
var noptUsage = require('nopt-usage')
var extend = require('extend')
var fs = require('fs')
var hashFiles = require('hash-files')
var crypto = require('crypto')
var shelljs = require('shelljs')

var knownOpts = {
  'benchmark': [String, Array],
  'clean': Boolean,
  'compiler': [String, Array],
  'experiment': String,
  'help': Boolean,
  'implementation': [String, Array],
  'root': String,
  'verbose': Boolean
}
var shortHands = {
  'b': ['--benchmark'],
  'c': ['--compiler'],
  'e': ['--experiment'],
  'h': ['--help'],
  'i': ['--implementation'],
  'v': ['--verbose']
}

function expandPaths (paths) {
  var expanded = []
  for (var i = 0; i < paths.length; ++i) {
    var p = paths[i]

    if (!fs.lstatSync(p).isDirectory()) {
      expanded.push(p)
    } else {
      expanded.push(path.join(p, '**'))
    }
  }
  return expanded
}

function computeBuildDirectoryName (config, cb) {
  var paths = expandPaths(config.implementation.dependencies)
  var hash = crypto.createHash('sha1')
  hash.update(JSON.stringify(config))
  hashFiles({
    files: paths
  }, function (err, hashValue) {
    if (err) cb(err)
    hash.update(hashValue, 'string')
    cb(null, hash.digest('hex'))
  })
}

function createRunner (config) {
  if (parsed.verbose) {
    console.log(
      'creating ' + config.compiler['runner-name'] +
      ' for ' + config.benchmark['short-name'] +
      ' from ' + config.implementation['short-name'] + ' implementation' +
      ' using ' + config.compiler['short-name'] + ' compiler')
    console.log('result saved in ' + config.location)
  }
  var silentState = shelljs.config.silent
  shelljs.config.silent = true
  shelljs.pushd(config.location)

  config.compiler.commands.forEach(function (c, i) {
    var cmd = c['executable-path'] + ' ' +
      c.options.join(' ')
    var status = shelljs.exec(cmd,
      {silent: !parsed.verbose})
    status.output.to('log-' + i + '.txt')

    if (status.code !== 0) {
      console.log('Build error for ' + config.benchmark['short-name'] + "'s " +
        config.implementation['short-name'] + ' implementation ' +
        ' using ' + config.compiler['short-name'] + ' compiler,' +
        " when executing '" + cmd + "'")
      console.log(status.output)
      process.exit(1)
    }
  })
  config.time = new Date()
  JSON.stringify(config, null, '  ').to('build.json')
  shelljs.popd()
  shelljs.config.silent = silentState
}

// Parse for options that do not need the configuration info
var parsed = nopt(knownOpts, shortHands)
if (!parsed.root) {
  console.log('fatal: No benchmarking suite root directory provided')
  process.exit(1)
} else {
  var suiteRoot = path.resolve(process.cwd(), parsed.root)
}

if (parsed.clean) {
  shelljs.rm('-rf', path.join(suiteRoot, '/builds'))
  process.exit(0)
}

// Other stuff that need the configuration info
configLib.config(suiteRoot, function (err, config) {
  if (err) {
    console.log(err)
    process.exit(1)
  }

  var description = {
    'benchmark': 'One of [' + config['benchmark-list'] + '], repeat to specify multiple benchmarks',
    'compiler': 'One of [' + config['compiler-list'] + '], repeat to specify multiple compilers',
    'experiment': 'Path to experiment configuration file',
    'help': 'Display this help',
    'implementation': 'One of [' + config['implementation-list'] + '], repeat to specify multiple implementations'
  }

  if (parsed.help) {
    var usage = noptUsage(knownOpts, shortHands, description)
    console.log(usage)
    process.exit(1)
  }

  configLib.extractShortNames(config, parsed)

  configLib.genBuildConfigurations(config, {
    benchmarks: parsed.benchmarks.length > 0 ? parsed.benchmarks : config['benchmarks-list'],
    implementations: parsed.implementations.length > 0 ? parsed.implementations : config['implementation-list'],
    compilers: parsed.compilers.length > 0 ? parsed.compilers : config['compiler-list']
  }).forEach(function (config) {
    computeBuildDirectoryName(config, function (err, name) {
      if (err) throw err
      config.location = path.join(suiteRoot, 'builds', name)

      shelljs.mkdir('-p', config.location)
      createRunner(config)
    })
  })
})
