#!/usr/bin/env node
var nopt = require('nopt')
var path = require('path')
var configLib = require(path.join(__dirname, '../lib/config'))
var pointer = require('json-pointer')
var extend = require('extend')
var noptUsage = require('nopt-usage')
var math = require('mathjs')

var knownOpts = {
  'csv': Boolean,
  'help': Boolean,
  'root': String,
  'run': [String, Array],
  'verbose': Boolean
}
var shortHands = {
  'h': ['--help'],
  'r': ['--root'],
  'v': ['--verbose']
}

function deepcopy (o) {
  if (Array.prototype.isPrototypeOf(o)) {
    return extend(true, [], o)
  } else {
    return extend(true, {}, o)
  }
}

var parsed = nopt(knownOpts, shortHands)
if (!parsed.root) {
  console.log('fatal: No benchmarking suite root directory provided')
  process.exit(1)
} else {
  var suiteRoot = path.resolve(process.cwd(), parsed.root)
}

configLib.config(suiteRoot, function (err, config) {
  if (err) {
    console.log(err)
    process.exit(1)
  }

  var description = {
    'csv': 'Output results in csv format (default)',
    'run': 'Run results to use, repeat to combine results from multiple runs',
    'help': 'Display this help',
    'verbose': 'Show results from intermediary stages'
  }

  if (parsed.help) {
    var usage = noptUsage(knownOpts, shortHands, description)
    console.log(usage)
    process.exit(1)
  }

  var runs = []

  if (parsed.run) {
    runs = parsed.run
  } else {
    // Defaults to all runs
    for (var t in config.runs) {
      if (t !== 'latest') {
        runs.push('runs/' + t)
      }
    }
  }

  var results = {}
  runs.forEach(function (runPath) {
    var runConfig = deepcopy(pointer.get(config, path.join('/', runPath)))

    for (var h in runConfig.results) {
      // Concatenate multiple time results for the same configuration in different runs
      if (results.hasOwnProperty(h)) {
        results[h].times = results[h].times.concat(runConfig.results[h].times)
      } else {
        results[h] = runConfig.results[h]
      }
    }
  })

  var a = []
  for (var h in results) {
    results[h]['mean-time'] = math.mean(results[h].times)
    results[h]['std-time'] = math.std(results[h].times)
    a.push(results[h])
  }

  console.log('benchmark,implementation,compiler,platform,environments,mean,std,times')
  for (var i = 0; i < a.length; ++i) {
    var line = [
      a[i].build.benchmark['short-name'],
      a[i].build.implementation['short-name'],
      a[i].build.compiler['short-name'],
      a[i].platform['short-name'],
      a[i].environment['short-name'],
      a[i]['mean-time'],
      a[i]['std-time']
    ]
    line = line.concat(a[i].times)
    console.log(line.join(','))
  }
})
